关系型数据库：由多个表组成，表与表之间存在关系

表：行-记录；列-字段

表与表之间的关系
一对一；一对多；多对多
实际上说的是表与表的数据之间的关系---某个表中的一条数据记录只对应另一个表中的一条数据记录


oracle的交互工具
（1）命令行工具：SQL*PLUS---该工具只能在安装oracle的主机上使用，如果其他远程机器要想使用该工具访问oracle数据库，需要先远程登录到安装oracle的主机(telnet)；也就是该工具没有通信功能
（2）图形界面工具：SQL Developer---该工具可以在远程机器上安装，也就是该工具有通信功能
该工具是java编写的


SQL Developer中在工作表中可以运行一条SQL语句，在该工具中只要遇到分号就默认是一条语句；


一，oracle的数据类型
数据类型用来描述整个字段中数据的类型。

常用数据类型：
1，数字
NUMBER
常用的定义形式NUMBER（N，M），表示的数字的总位数为N，小数点后面的位数为M

例如
类型NUMBER（6，2）能够表示的最大数字是9999.99

精度可不写，默认为0
长度的最大为38，如果不指定长度，默认为38位

NUMBER的变种数据类型：
内部实现是NUMBER，可以将其理解为NUMBER的别名，目的是多种数据库及编程语言兼容
NUMERIC(p,s)：完全映射至NUMBER(p,s)
DECIMAL(p,s)或DEC(p,s)：完全映射至NUMBER(p,s)
INTEGER或INT：完全映射至NUMBER(38)类型
SMALLINT：完全映射至NUMBER(38)类型
FLOAT(b)：映射至NUMBER类型
DOUBLE PRECISION：映射至NUMBER类型
REAL：映射至NUMBER类型

2，字符串:
字符串是严格区分大小写的

CHAR
定长字符串，如果给定的字符串长度不够，补齐空格；
常用的定义形式CHAR（N），表明字符串的存储长度为100个字节，并且固定
例如
类型CHAR（20）保存用UTF-8编码的字符串"dengjian"（8个字节），那么实际上剩余的12个字节将是空
如果不加后面的长度描述，默认为1个字节；

CHAR(n BYTE)
CHAR(n CHAR)
CHAR(n)默认的是n个BYTE

VARCHAR

VARCHAR2--oracle独有的数据类型
变长字符串，可以指定字符串的最大存储长度
定义形式为为VARCHAR2（N），N表示最大可占用的字节数；
例如
VARCHAR2(100)表明字符串的最大存储长度为100，如果用这种类型保存dengjian，那么实际上只有8个字节
VARCHAR2后面必须加上存储长度

LONG和CLOB
LONG类型可以认为是VARCHAR2的加长版，用来存储变长字符串，最多达2GB的字符串数据，但是LONG类型有诸多限制，所以不建议使用：
每个表只能有一个LONG类型列；
不能作为主键；
不能建立索引；
不能出现在查询条件中等
CLOB用来存储定长或变长字符串，最多达4GB的字符串数据，ORACLE建议开发中使用CLOB替代LONG类型，比如如下方式定义数据表：

3，日期
DATE
用于定义日期，存储长度是7个字节；

默认的SELECT输出格式是：DD-MON-YY, 例如："11-APR-71",如果是中文环境，是"11-4月-71"

用RR作为年的格式，把字符串转换为日期时---很奇葩
特别注意：
当年只用两位数字表示，71表示的到底是哪年？XX71年
确定方法：系统当前时间和赋值时给定的时间

SELECT TO_CHAR(TO_DATE('97-10-01','RR-MM-DD'),'YYYY-MM-DD') FROM DUAL;

DATE用来保存日期和时间。表示范围从是公元前4712年1月1日至公元9999年12月31日。
DATE类型在数据库中的实际存储固定为7个字节，格式分别为：
第1字节：世纪+100
第2字节：年
第3字节：月
第4字节：天
第5字节：小时+1
第6字节：分+1
第7字节：秒+1


TIMESTAMP
TIMESTAMP表示时间戳，与DATE的区别是不仅可以保存日期和时间，还能保存小数秒，可指定为0-9位，默认6位，最高精度可以到ns(纳秒)级别。
数据库内部用7或者11个字节存储，精度为0时，用7字节存储，与DATE功能相同，精度大于0则用11字节存储。格式为：
第1字节-第7字节：和DATE相同
第8-11字节：纳秒，采用4个字节存储，内部运算类型为整型



二，SQL语句
SQL是与数据库沟通的标准语言
尽可能少用方言

编写SQL语句的风格
将SQL关键字大写，其他的小写SQL不区分大小写；

概述:
DDL
数据定义语言：
用于建立，修改，删除数据库对象（比如:表table）；
包括：创建语句CREATE，修改语句ALTER，删除语句DROP，比如使用CREATE TABLE创建表，使用ALTER TABLE修改表，使用DROP TABLE删除表；
DDL不需要事务参与，自动提交

DML
数据操作语言：
用于改变数据库中的数据---增加，修改，删除
包括插入语句INSERT，修改语句UPDATE，删除语句DELETE；
INSERT语句用于将数据插入到数据库中；
UPDATE语句用于更新（修改）数据库中已经存在的数据；
DELETE语句用于删除数据库中已经存在的数据；
DML语言是和事务相关的，执行完DML操作之后必须经过事务控制语句COMMIT提交之后才能正真地将磁盘中的数据修改。

TCL
事务控制语言
用来维护数据的一致性；
包括提交COMMIT，回滚ROLLBACK，保存点SAVEPOINT三条语句；
COMMIT用来确认已经进行的数据库改变；
比如：当向数据库中插入一条记录时，这条记录不会真的写入数据库（即不会写到硬盘上，只是在内存中），需要用COMMIT语句提交，数据就会保存到硬盘上
ROLLBACK用来取消已经进行的数据库改变；

DQL
数据查询语言
用来查询所需要的数据。
包括SELECT语句

DCL---（DBA的工作）
数据控制语言
用于创建用户，执行数据库权限的授予和收回操作等操作；
包括授予GRANT，收回REVOKE，创建用户CREATE USER；
DCL语句不需要事务参与，是自动提交的。

（一）DDL语句
对表或其他数据库对象的操作

1，创建表
CREATE TABLE table_name(
字段1 数据类型，其他字段属性
字段2 数据类型，
字段3 数据类型，
字段4 数据类型，
);

创建表的时候要做的就是指定表中的字段及其属性，整条字段包括：字段名，字段数据类型和其他字段属性

注意：在定义创建表的时候
不同字段之间需要用逗号隔开；
同一个字段不同属性之间不用加逗号隔开；

字段名和数据类型是比不可少的
其他字段属性包括：
（1）默认值 使用DEFAULT关键字 加 值的方式可以为字段指定默认值
（2）字段是否允许有空值 NULL和NOT NULL
默认情况下，所有字段都允许有空值。如果用NOT NULL指定，那么这个字段就不允许有空值存在，于是在用插入语句添加数据到表中的时候，如果该字段没有默认值，就必须为该字段赋值
(3)是否为主键

在创建的表的时候，如果字段没有显式地指定默认值，那么将默认值为NULL，NULL表明在计算机中根本不存在，也就不占用存储空间；

CREATE TABLE student(
id NUMBER(4), 
name CHAR(20), 
gender CHAR(1));

在插入记录的时候，可以显示或隐式地把一条记录的某些字段设为NULL。
插入某个字段NULL
INSERT INTO student VALUES(1000, '李莫愁', 'F');

INSERT INTO student VALUES(1001, '林平之', NULL);--显式插入NULL值

INSERT INTO student(id, name) VALUES(1002, '张无忌');--隐式插入NULL值

更新为NULL
UPDATE student SET gender = NULL; --全表都被更新

非空约束:NOT NULL
如果指定字段的属性为NOT NULL，那么在插入，更新记录的时候，这些字段必须有值；

空值条件
判断一个字段的值是否为空
xxx IS NULL
xxx IS NOT NULL

空值函数出现的需要:
NULL和任何数字运算的结果都为NULL，导致在对某些字段运算的时候，出现问题。

空值替换

NVL(arg1,arg2)
该函数会判断第一个参数是否为NULL，如果为NULL，返回第二个参数；如果不是返回第一个参数；
因此该函数的作用是将NULL替换为非NULL值。第二个参数就是我们拿来替换NULL的值

NVL2(arg1,arg2,arg3)
该函数会判断第一个参数是否为NULL，如果为NULL，则返回第三个参数，如果不是NULL，则返回第二个参数
查询员工奖金，如有则显示"有奖金"，如没有则显示"没有奖金"


CREATE TABLE employee_dengjian(
  id1 NUMBER(4) NOT NULL
  name1 VARCHAR2(20) DEFAULT ‘M’，
  gender CHAR1(1),
  birth DATE,
  salary NUMBER(6,2),
  job1 VARCHAR2(20),
  deptno NUMBER(2)
);


2，查看表结构
DESC table_name;

3，删除表
DROP TABLE table_name;

4，修改表名
RENAME old_table_name TO new_table_name

5.修改表的结构---表的结构就是字段的结构
尽量不要在表中有数据的时候，修改表的结构；表结构的修改尽量全部放在数据库设计阶段做

（1）添加字段---字段只能追加到表的最后
ALTER TABLE table_name
ADD(字段 数据类型 其他属性);

（2）删除字段---数据也会随之删除
ALTER TABLE table_name
DROP(字段名);

（3）修改现有字段的属性---可以修改类型（包括长度），默认值
修改类型和长度可能存在风险
ALTER TABLE table_name
MODIFY(字段名 类型（长度） 默认值---DEFAULT 值);



（二）DML语句
对表中数据的增，删，该
使用DML语句对数据进行增，删，改时，伴随这事务控制；
当向数据库中插入一条记录时，这条记录不会真的写入数据库（即不会写到硬盘上，只是在内存中），需要用COMMIT语句提交，数据就会保存到硬盘上；如果希望撤消之前数据操作可以使用ROLLBACK


1，INSERT
插入一条记录到指定的表中
INSERT INTO table_name
(字段1，字段2)
VALUES
(字段1的值，字段2的值);

（1）说明：
插入一条记录到表中，就是在对这条记录的所有字段赋值；如果在插入的时候不对该记录的所有字段赋值，那么没有赋值的字段将使用默认值；
字段名和字段值要一一对应；
可以不指定针对哪些字段插入数据，若不指定，则是全列插入，这时VALUES中字段值的顺序，类型，个数必须与表中的字段一致才可以

（2）不同数据类型的赋值方式
数字：与书写一致

字符串：单引号包围

日期DATE：建议使用TO_DATE函数
TO_DATE函数可以将指定格式的日期字符串，转换为DATE类型的数据
比如 TO_DATE('2011-11-11','YYYY-MM-DD')


2，UPDATE
修改记录中字段的值
UPDATE table_name
SET 字段名1=值，字段名2=值   （这里的等号表示赋值）
WHERE 字段3=值    （这里的等号表示判断）

说明：
上面语句的作用是修改字段的值，UPDATE后面的table_name指明要修改的字段所在的表，SET后面的语句指明要修改的字段，WHERE后面的语句指明过滤条件---当不希望所有记录的这些字段的值都修改，只修改一部分，可以可以使用WHERE过滤，把需要修改的字段对应的记录找出来

3，DELETE
从表中删除记录，过滤条件指明了符合条件的记录
DELETE FROM table_name
WHERE ;



（三）查询语句---SELECT
查询表中的所有数据
SELECT * FROM table_name;

三，字符串函数
字符串函数：指的是参数为字符串的函数--对字符串进行操作

伪表：DUAL
为了满足SELECT语法要求，但是要查询的数据与表中的数据没有关系时使用

字符串连接
CONCAT(string,string)
string里面可以写字段名，此时不许要加''，也可以直接使用字符串字面量，此时要用单引号

||
可以连续连接多个字符串

LENGTH（string）
返回字符串的长度

大小写转换
UPPER(string)---转换为全大写
LOWER(string)---转换为全小写
INITCAP(string）---每个单词首字母大写，其他小写；注意:这个函数用空格来区分单词

截去指定的子字符串
TRIM(S1 FROM S2)--从s2的前后截去所有的s1，特别注意截取集只能有一个字符，也就是说s1只能是一个字符
LTRIM（S1[S2]）--截取集可以为多个字符
RTRIM(S1[S2])
特别注意：截取字符串时，只是截取"端"的字符串，会从指定的端一直截取下去，直到遇到与截取集不同的字符串时；
特别注意：截取集与被截取的字符串可以在顺序上不同：
比如:截取集有3个字符，那么截取的时候就从左边3个字符3个字符的比较，忽略顺序

字符串补位---常用来实现左右对齐效果
LPAD(str1,n,str2)
显示str1的内容，显示长度为n，如果长度不足，左边补为str2，注意str2只能为一个字符;如果长度足够，则截取。
RPAD(str1,n,str2)
显示str1的内容，显示长度为n，如果长度不足，右边补str2，注意str2只能为一个字符;如果长度足够，则截取。

数据库中，下标都是从1开始

截取子字符串
SUBSTR（string,off,len）
从字符从string的off下标开始，连续截取len位

获取一个字符串在另一个字符串中的位置
INSTR（str1,str2[,n [,m]]）--中括号中的代表可写可不写的参数
n表示从第几个字符开始查找，若不写默认为1
m表示第几次出现该字符串，若不写默认为1
返回值：下标从1开始，如果没有找到返回0

四，数值函数
数值函数指的是参数为数值类型的函数

ROUND(n[,m])
四舍五入：对n进行，保留到小数点后m位；
m可以不写，如果不写m，默认m=0,表示保留到个位；
m可写负数，表示保留到十位以上的数字

TRUNC(n[,m])
截取数字：对n进行截取，截取到小数点后m位；
m可以不写，如果不写m，默认m=0,表示截取到个位；
m可写负数，表示截取到十位以上的数字,后面的数位补0，直到个位

MOD(m,n)
取余数：m为被除数，n为除数；
如n为0，则直接返回n

取整函数
向上取整：CEIL(n)
向下取整：FLOOR(n)

五，日期函数
获取oracle服务器的系统当前时间
SYSDATE
SYSTIMESTAMP

SYSDATE
SYSDATE本质是一个Oracle的内部函数，用来返回当前的系统时间，精确到秒，默认显示格式是DD-MON-RR

SYSTIMESTAMP
SYSTIMESTAMP也是Oracle的内部日期函数，返回当前系统日期和时间，精确到毫秒

日期转换函数
TO_DATE（string,strformat）
注意如果想要转换的日期字符串中含有非因为的字母和符号，那么在格式字符串中，这些字符必须用双引号包围起来，才能把字符串正确地解析为DATE

常用的日期格式
RR---不常用
YY 2位数字的年份
YYYY 4位数字的年份
MM 2位数字的月份
MOM 英文简拼的月份---地区差异，最好不用
MONTH 英文全拼的月份---地区差异，最好不用
DD 2位数字的天
DY 英文星期几的缩写---地区差异，最好不用
DAY 英文星期几的全拼---地区差异，最好不用
HH24 24小时制的小时
HH12 24小时制的小时
MI 分
SS 秒

数据库中，日期是可以比较大小的，时间晚的大，早的小。
可以对一个日期的值进行加减操作，加上一个数字等于加上对应的天数，结果为计算后的日期；
两个日期可以进行减法操作，结果为相差的天数；

TO_CHAR(date,strformat)

常用日期函数
LAST_DAY(date)
获取指定日期所在月的最后一天的日期，返回值类型为DATE，参数类型最好也写为DATE

ADD_MONTHS(date,n)
日期date的基础上加n个月的日期，参数date为DATE类型，参数n为加上的月数，可以为负数；返回值类型为DATE;

MONTHS_BETWEEN(date1,date2)
日期date1，日期date2之间的月数，参数为DATE，返回值为NUMBER

NEXT_DAY(date,daystr)---地区差异不建议使用
daystr表示星期几的英文或中文字符
NEXT_DAY(date,n)
返回：离date最近的没有过的星期几n对应的日期,返回值为DATE类型；
1-7分别表示：星期天，星期一到星期六

EXTRACT---一般不用

其他函数
比较函数
LEAST(exp1,exp2...)
返回给定参数中最小的那个，参数个数可以任意，返回值类型和参数类型相同；
GREATEST(exp1,exp2...)
返回给定参数中最大的那个，参数个数可以任意，返回值类型和参数类型相同；








